#!/usr/bin/env sh

cnfDir="${HOME}/.irc"
datDir="${HOME}/usr/irc"
idntLst="${cnfDir}/idents.csv"
servLst="${cnfDir}/servers.csv"
chanLst="${cnfDir}/channels.csv"
actLst="${cnfDir}/active.csv"
ignLst="${cnfDir}/ignore.csv"

findServ() {
  awk -F ',' '$1 == "'"${1}"'" {print $0}' "${servLst}"
}

findIdent() {
  awk -F ',' '$1 == "'"${1}"'" && $2 == "'"${2}"'" {print $0}' "${idntLst}"
}

findServIdents() {
  awk -F ',' '$1 == "'"${1}"'" {print $0}' "${idntLst}"
}

findChan() {
  awk -F ',' '$1 == "'"${1}"'" && $2 == "'"${2}"'" {print $0}' "${chanLst}"
}

findServChans() (
  awk -F ',' '$1 == "'"${1}"'" {print $0}' "${chanLst}"
) 

findActive() {
  tail -n +2 "${actList}"
}

readServ() {
  test "$#" -eq 1 && serv="${1}" || return 1
  #read -r serv < /dev/stdin
  s_key=$(printf '%s' "${serv}" | cut -d ',' -f 1)
  s_addr=$(printf '%s' "${serv}" | cut -d ',' -f 2)
  s_port=$(printf '%s' "${serv}" | cut -d ',' -f 3)
  s_def=$(printf '%s' "${serv}" | cut -d ',' -f 4)
  
  s_pidf="${datDir}/${s_addr}/pid"
}

readIdent() {
  test "$#" -eq 1 && ident="${1}" || return 1
  i_serv=$(printf '%s' "${ident}" | cut -d ',' -f 1)
  i_key=$(printf '%s' "${ident}" | cut -d ',' -f 2)
  i_name=$(printf '%s' "${ident}" | cut -d ',' -f 3)
  i_nick=$(printf '%s' "${ident}" | cut -d ',' -f 4)
  i_pass=$(printf '%s' "${ident}" | cut -d ',' -f 5)
  i_def=$(printf '%s' "${ident}" | cut -d ',' -f 6)
}

readChan() {
  test "$#" -eq 1 && chan="${1}" || return 1
  c_serv=$(printf '%s' "${chan}" | cut -d ',' -f 1)
  c_key=$(printf '%s' "${chan}" | cut -d ',' -f 2)
  c_name=$(printf '%s' "${chan}" | cut -d ',' -f 3)
  c_def=$(printf '%s' "${chan}" | cut -d ',' -f 4)
}

joinChan() {
  grep -q "${s_key},${c_key}" "${cnfDir}/active.csv" && return 0 
  printf 'Joining "%s:%s"\n' "${s_key}" "${c_key}"
  printf '/join %s\n' "${c_name}" > "${HOME}/usr/irc/${s_addr}/in"
  printf '%s,%s\n' "${s_key}" "${c_key}" >> "${cnfDir}/active.csv"
}

leaveChan() {
  grep -q "${s_key},${c_key}" "${cnfDir}/active.csv" || return 0 
  printf 'Leaving "%s:%s"\n' "${s_key}" "${c_key}"
  printf '/part %s\n' "${c_name}" > "${HOME}/usr/irc/${s_addr}/in"
  sed -i "/${s_key},${c_key}/d" "${cnfDir}/active.csv"
}

writeChan() {
  text="${@}"
  printf '%s\n' "${text}" > "${datDir}/${s_addr}/${c_name}/in"
}

checkServ() {
  test -f "${s_pidf}" && pid=$(cat "${s_pidf}") || pid=""
  if test -n "${pid}"; then
    ps -p "${pid}" 2>&1 >/dev/null
  else
    return 1 
  fi
}

joinServ() {
  if ! checkServ; then
    printf 'Cleaning up "%s"\n' "${s_key}"
    sed -i "/^${s_key}/d" "${cnfDir}/active.csv"
    printf 'Connecting to "%s"\n' "${s_key}"
    test -z "${i_pass}" && i_pass=$(pass-get "irc/${s_key}/${i_key}") && export i_pass
    ii -i "${datDir}" -s "${s_addr}" -p "${s_port}" -n "${i_nick}" -f "${i_name}" -k 'i_pass' 2>&1 >/dev/null &
    printf '%s' "$!" > "${datDir}/${s_addr}/pid"
    #checkIdent && NOTIFY_ICON=' ' NOTIFY_NAME='IRC' NOTIFY_TEXT="${s_key}" notify-create
    checkIdent && notify-quick ' ' 'IRC' "${s_key}"
  else
    printf 'Server "%s" already running!\n' "${s_key}"
  fi
  defChan=$(findServChans "${s_key}" | awk -F ',' '$4 == 1 {print $0}')
  for chan in ${defChan}; do
    readChan "${chan}"
    joinChan      
  done
}

recServ() {
  while :; do
    ! checkServ && find "${datDir}/${s_addr}" -name 'in' -delete && joinServ
    test -e "${s_pidf}" && pid=$(cat "${s_pidf}") || pid=''
    if test -n "${pid}"; then
      tail --pid="${pid}" -f /dev/null
    fi
    #NOTIFY_ICON=' ' NOTIFY_NAME='IRC' NOTIFY_TEXT="${s_key}" notify-create
    notify-quick ' ' 'IRC' "${s_key}"
    sleep 1
  done
}

saveHistory() {
  printf 'Archiving logs on "%s"\n' "${s_key}"
  chanLst=$(cd "${datDir}/${s_addr}"; find -mindepth 2 -maxdepth 2 -name 'out')
  for chan in ${chanLst}; do
    name=$(printf '%s' "${chan}" | cut -d '/' -f 2)
    printf 'Archiving "%s"\n' "${name}"
    mkdir -p "${datDir}/${s_addr}/history/${name}"
    awk -v dir="${datDir}/${s_addr}/history/${name}" '{date=strftime("%Y-%m-%d", $1); print >> dir"/"date".log"}' "${datDir}/${s_addr}/${chan}"
    test "$?" -eq 0 && truncate -s 0 "${datDir}/${s_addr}/${chan}"
  done
}

findHistory() {
  grep "${@}" "${datDir}/${s_addr}/history/${c_name}"/*.log
}

isIgnored() {
  ign=$(awk -F ',' '$1 == "'"${1}"'" && $2 == "'"${2}"'" {print $3}' "${ignLst}")
  test -n "${ign}" && return 0
  return 1
}

checkIdent() {
  printf 'Identifying as "%s"\n' "${i_key}"
  tail -n 0 -f "${datDir}/${s_addr}/nickserv/out" | \
  while read line; do
    if printf '%s' "${line}" | grep -q 'You are now identified'; then
      printf 'Indentified!\n' "$(date +'%X')"
      kill $(pgrep -f 'tail -n 0')
      return 0
    elif printf '%s' "${line}" | grep -q 'Invalid password'; then
      printf 'Invalid password!\n' "$(date +'%X')"
      kill $(pgrep -f 'tail -n 0')
      return 1
    fi
  done
}

termReader() {
  trap 'stty echo; tput cnorm' HUP INT TERM
  stty -echo; tput civis

  c_self='\033[0;31m'; c_nick='\033[0;33m'
  c_text='\033[0;39m'; c_ment='\033[0;32m'
  c_sys='\033[0;2m';   c_act='\033[0;3m'
  c_res='\033[0m'

  t_act='«';  t_speak='»'
  t_join='+'; t_left='×'
  t_mode='*'; t_quit=';'
  t_mute='*';
  t_empty=$(seq -s ' ' 17 | tr -d '[:digit:]')

  m_rows=$(tput lines); m_cols=$(tput cols)

  now=$(date +%s)
  #now=0

  clear

  tail -f -n "${m_rows}" "${datDir}/${s_addr}/${c_name}/out" | \
  while IFS=' ' read -r m_time m_nick m_text; do
    #printf '%s: %s\n' "${m_nick}" "${m_text}" && continue
    m_nick=$(printf '%s' "${m_nick}" | tr -d '<>' | cut -c 1-12)
    m_self=0; m_sys=0; m_ment=0; m_act=0
    test "${m_nick}" = "${i_nick}" && m_self=1
    test "${m_nick}" = '-!-' && m_sys=1
    test "${m_sys}" != 1 && printf '%s' "${m_text}" | grep -q "${i_nick}" && m_ment=1
    printf '%s' "${m_text}" | grep -q -e '^[^\s\\]*ACTION' && m_act=1
    if test "${m_act}" -eq 1; then
      o_nick=" ${c_sys}${m_nick}${c_res}"
      printf '%-24b%b\n' "${o_nick}" "${c_sys}${t_act}${c_res}"
    elif test "${m_sys}" -eq 1; then
      m_nick=$(printf '%s' "${m_text}" | cut -d '(' -f 1 | cut -c 1-12)
      m_symb=""
      case "${m_text}" in
        *join*) m_symb="${t_join}";;
        *left*) m_symb="${t_left}";;
        *mode*) m_symb="${t_mode}";;
        *quit*) m_symb="${t_quit}";;
      esac
      o_nick=" ${c_sys}${m_nick}${c_res}"
      printf '%-24b%b\n' "${o_nick}" "${c_sys}${m_symb}${c_res}"
    elif test "${m_ment}" -eq 1; then
      o_nick=" ${c_nick}${m_nick}${c_res}"
      o_text=$(printf '%s' "${m_text}" | fold -s -w "$((m_cols - 17))" | sed -e "1!s/^/${t_empty}/")
      o_text=" ${c_ment}${o_text}${c_res}"
      printf '%-25b%b%b\n' "${o_nick}" "${c_sys}${t_speak}${c_res}" "${o_text}"
      test "${m_time}" -gt "${now}" && notify-quick ' ' 'IRC' "${c_name}"
    elif test "${m_self}" -eq 1; then
      o_nick=" ${c_self}${m_nick}${c_res}"
      o_text=$(printf '%s' "${m_text}" | fold -s -w "$((m_cols - 17))" | sed -e "1!s/^/${t_empty}/")
      o_text=" ${c_text}${o_text}${c_res}"
      printf '%-25b%b%b\n' "${o_nick}" "${c_sys}${t_speak}${c_res}" "${o_text}"
    else
      if isIgnored "${s_key}" "${m_nick}"; then
        printf '%-14b%b%b\n' " ${m_nick}" "${c_sys}${t_mute}${c_res}" ' (muted)'
        continue
      fi
      o_text=$(printf '%s' "${m_text}" | fold -s -w "$((m_cols - 17))" | sed -e "1!s/^/${t_empty}/")
      o_nick=" ${c_nick}${m_nick}${c_res}"
      printf '%-25b%b%b\n' "${o_nick}" "${c_sys}${t_speak}${c_res}" " ${c_text}${o_text}${c_res}"
    fi
  done
}

termWriter() {
  c_chan='\033[0;33m'
  c_sys='\033[0;2m'
  c_res='\033[0m'

  t_swt='@'
  t_chan='#'

  o_chn=$(printf '%s' "${c_name}" | tr -d '#')

  while :; do
    clear
    printf ' [%b%b]: ' "${c_sys}${t_chan}${c_res}" "${c_chan}${o_chn}${c_res}"
    read line
    writeChan "${line}"
  done
}

