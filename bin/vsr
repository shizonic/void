#!/usr/bin/env sh

lock='/tmp/record.mkv'

test -f "${lock}" && exit 1

desktop=0
dmode='screen'
dwin=0

micro=0
speaker=0
webcam=0

mouse=1
follow=0

delay=0
fps=30

opts=$(getopt -o dsmw)
ffmopts=''
loglvl='-8'

#tmpFile="/tmp/$(date +'%x-%X').mkv"
output="${HOME}/usr/med/mov/rec/$(date +'%x-%X').webm"

while test "$#" -gt 0; do
  case "${1}" in
    -d) desktop=1; shift 1;;
    -dl) delay="${2}"; shift 2;;
    -dm) dmode="${2}"; shift 2;;
    -dw) dwin="${2}"; shift 2;;
#    -ll) loglvl="${2}"; shift 2;;
    -m) micro=1; shift 1;;
#    -ms) mouse="${2}"; shift 2;;
    -s) speaker=1; shift 1;;
    -w) webcam=1; shift 1;;
    *) printf 'Unrecogniized option "%s"\n' "${1}"; exit 1;;
  esac
done

ffmopts="${ffmopts} -loglevel ${loglvl}"

if test "$(expr ${desktop} + ${speaker} + ${micro} + ${webcam})" -eq 0; then
  printf 'ERROR: Nothing to record!\n'
  exit 1
fi

if test "${desktop}" -eq 1; then
  display=':0.0'
  if test "${dmode}" = 'screen'; then
    #printf 'Recording fullscreen\n'
    area=$(xrandr | grep primary | grep -o -E '[0-9]{1,}x[0-9]{1,}')
    ffmopts="${ffmopts} -f x11grab -draw_mouse ${mouse} -s ${area} -r ${fps} -i ${display} -c:v libx264 -preset ultrafast -crf 10 -y"
  elif test "${dmode}" = 'win'; then
    if ! wattr "${dwin}"; then
      printf 'ERROR: No valid window passed!\n'
      exit 1
    fi
    #printf 'Recording window %s\n' "${dwin}"
    winW=$(wattr w "${dwin}");     winH=$(wattr h "${dwin}")
    winX=$(wattr x "${dwin}");     winY=$(wattr y "${dwin}")
    ffmopts="${ffmopts} -f x11grab -draw_mouse ${mouse} -s ${winW}x${winH} -r ${fps} -i ${display}+${winX},${winY} -c:v libx264 -preset ultrafast -crf 10 -y"
  elif test "${dmode}" = 'mouse'; then
    #printf 'Recording mouse\n'
    factor=3
    mouseW=$(printf '%s/%s\n' $(wattr w $(lsw -r)) ${factor} | bc -s)
    mouseH=$(printf '%s/%s\n' $(wattr h $(lsw -r)) ${factor} | bc -s)
    ffmopts="${ffmopts} -f x11grab -draw_mouse ${mouse} -follow_mouse centered -s ${mouseW}x${mouseH} -r ${fps} -i ${display} -c:v libx264 -preset ultrafast -crf 10 -y"
  else
    printf 'ERROR: Invalid mode: %s\n' "${dmode}"
    exit 1
  fi
fi

if test "${webcam}" -eq 1; then
  ffmopts="${ffmopts} -f video4linux2 -i /dev/video0"
fi

if test "${speaker}" -eq 1; then
  ffmopts="${ffmopts} -f alsa -ac 2 -i hw:Loopback,1,0"
fi

if test "${micro}" -eq 1; then
  ffmopts="${ffmopts} -f alsa -ac 1 -i hw:0,0"
fi

clean() {
  test -f "${output}" && notify-send ' fin' || notify-send ' stp'
  rm -f "${lock}"
}

trap 'clean' EXIT INT TERM

test "${delay}" -gt 0 && sleep "${delay}"

#echo "ffmpeg ${ffmopts}"
notify-send ' rec'
ffmpeg ${ffmopts} "${lock}"

test -f "${lock}" || exit 1

notify-send ' con'
ffmpeg -loglevel "${loglvl}" -i "${lock}" -c:v libvpx -qmin 1 -qmax 10 -preset ultrafast -c:a libvorbis "${output}"

printf '%s\n' "${output}"
