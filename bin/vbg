#!/usr/bin/env sh
# void blog generator
# requires: lowdown, envsubst

#set -e

dp=$(dirname $(realpath $0))

test -e "${dp}/../blg/smag.def" && . "${dp}/../blg/smag.def" || exit 1
test -e "${dp}/../blg/smag.cnf" && . "${dp}/../blg/smag.cnf"

check_ext() {
  test -f "${1}" || return 1
  export ext=$(basename "${1}" | awk -F '.' '{print $NF}')
  test "${ext}" = "${2}" || return 1
}

str2slug() {
  iconv -t 'ascii//TRANSLIT' | sed -r 's/[!?.,-]//g; s/[^a-zA-Z0-9]+/-/g' | sed -r 's/^-+\|-+$//g' | tr 'A-Z' 'a-z'
}

md2toc() {
  hds=$(grep -E '^#+' "${1}")
  min=$(printf '%s\n' "${hds}" | grep -o -E '#+' | sort -n | head -n 1 | awk '{ print length }')
  printf '%s\n' "${hds}" | sed "s|^#\{${min}\}||g" | sed 's|#|    |g' | sed -E 's|[^ #*]+.*|* [&](#&)|g'
  #printf '%s\n' "${hds}" | sed "s|^#\{${min}\}||g" | tr -d ' ' | sed 's|#|    |g' | sed -E 's|[^ #*]+|* [&](#&)|g' 
}

toc2class() {
  sed 's/<ul>/<ul class="menu menu-nav">/g; s/<li>/<li class="menu-item">/g'
}

code2class() {
  sed 's|<pre><code class="language-\([a-z]*\)">|<pre class="code" data-lang="\1"><code class="\1">|'
}

md2html() {
  lowdown 
}

md2vars() {
  sed '/^---$/q' | sed '$ d' | sed '/^\s*$/d' | sed 's|:[\ ]*|="|; s|$|"|'
}

md2text() {
  sed -e '1,/^---$/d' | tail -n +2
}

md2data() {
  check_ext "${1}" 'md' || return 1
  eval "$(cat ${1} | md2vars)"
  text=$(printf '%s' "$(cat ${1} | md2text)" | md2html | code2class)
  toc=$(printf '%s' "$(md2toc ${1})" | md2html | toc2class)
  slug=$(printf '%s' "${title}" | str2slug)
  layout='layout.tpl'
  export author issue layout slug tags template text title toc published
}

tpl2data() {
  check_ext "${1}" 'tpl' || return 1
  content=$(envsubst < "${1}")
  export content
}

cmp_page() {
  name=$(basename "${1}" | cut -d '.' -f 1)
  dir=$(dirname "${1}")
  dirName=$(basename "${dir}")
  dest=$(printf '%s' "${dir}" | sed "s|${SMAG_SRC}|${SMAG_DST}|")

  test -d "${dest}" || mkdir -p "${dest}"

  md2data "${1}"
  test "${published}" != '' || return 1
  test -f "${dir}/${layout}" || return 1
  test -f "${dir}/${template}" || return 1

  tpl2data "${dir}/${template}"
  tpl2data "${dir}/${layout}"

  printf '%s' "${content}" > "${dest}/${name}.html"
}

cmp_index() {
  dir="${1:-$(pwd)}"
  dirName=$(basename "${dir}")
  dest=$(printf '%s' "${dir}" | sed "s|${SMAG_SRC}|${SMAG_DST}|")

  mkdir -p "${dest}"

  printf 'Creating index %s\n' "${dirName}"
  
  links='<ol>'
  for fn in $(find "${dir}" -mindepth 1 -maxdepth 1 -name '*.md' -type f | sort); do
    name=$(basename "${fn}" | cut -d '.' -f 1)
    md2data "${fn}"
    test -z "${published}" && continue
    date=$(date -d "${published}" +'%d.%m.%Y')
    links="${links}"$(printf '<li><a href="%s.html">%s</a> (<span class="label">%s</span>)</li>\n' "${name}" "${title}" "${date}")
  done
  links="${links}</ol>"
  export links
  
  title="Index of ${dirName}"
  export title
  
  tpl2data "${dir}/index.tpl"
  tpl2data "${dir}/${layout}"

  printf '%s' "${content}" > "${dest}/index.html"
  test -e "${dest}/index.html" || ln -s "${dest}/index.html" "${PWD}/${SMAG_DST}/index.html"
}

cmp_dir() {
  dir="${1:-$(pwd)}"
  for fn in $(find "${dir}" -mindepth 1 -maxdepth 1 -name '*.md' -type f | sort); do
    printf ' - %s\n' $(basename "${fn}")
    cmp_page "${fn}"
  done
  cmp_index "${dir}"
  if test -d "${dir}/${SMAG_AST}"; then
    name=$(basename "${dir}")
    printf 'Copying assets\n'
    cp -r "${dir}/${SMAG_AST}" "${PWD}/${SMAG_DST}/${name}/${SMAG_AST}"
  fi
}

cmp_def() {
  for dir in $(find "${PWD}/${SMAG_SRC}" -mindepth 1 -maxdepth 1 -not -name "${SMAG_AST}" -type d); do
    nane=$(basename "${dir}")
    printf 'Processing %s\n' "${name}" 
    cmp_dir "${dir}"
  done
}

cmp_site() {
  printf 'Cleaning dist\n'
  test -d "${PWD}/${SMAG_DST}" && rm -r "${PWD}/${SMAG_DST}"
  mkdir -p "${PWD}/${SMAG_DST}"
  cmp_def
}

upd_site() {
  git pull origin master
}

new_cont() {
  test -e "${PWD}/${1}" && exit
  cat > "${PWD}/${1}" << EOL
author: 
tags: 
title: 
published: $(date +'%Y-%m-%dT%H:%M:%S')
template: .tpl
issue: 

---

EOL
  vim "${PWD}/${1}"
}

act='cmp'
test "$#" -gt 0 && act="${1}" && shift

case "${act}" in
  c|cmp) cd "${dp}/../blg"; cmp_site ${@};;
  u|upd) cd "${dp}/../blg"; upd_site ${@};;
  n|new) new_cont ${@};;
  o|open) $BROWSER "${dp}/../blg/${SMAG_DST}/";;
esac
