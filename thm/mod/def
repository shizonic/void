#!/usr/bin/env python

import sys
import colorsys

def hex_to_rgb(value):
    value = value.lstrip('#')
    lv = len(value)
    return tuple(int(value[i:i + lv // 3], 16) for i in range(0, lv, lv // 3))

def rgb_to_hex(rgb):
    return '#%02x%02x%02x' % rgb

def color_brightness(color):
    return int(((color[0] + color[1] + color[2]) / 3) / 2.55)
    #return int((0.299 * color[0] + 0.587 * color[1] + 0.114 * color[2]) / 2.55)

def lighten_color(color, amount):
    #print("Lighten color " + str(amount))
    r, g, b = (color[0], color[1], color[2])
    h, s, v = colorsys.rgb_to_hsv(r, g, b)
    v = v + (v / 100 * amount)
    r, g, b = colorsys.hsv_to_rgb(h, s, v)
    return (int(r), int(g), int(b))

def darken_color(color, amount):
    #print("Darken color " + str(amount))
    r, g, b = (color[0], color[1], color[2])
    h, s, v = colorsys.rgb_to_hsv(r, g, b)
    v = v - (v / 100 * amount)
    r, g, b = colorsys.hsv_to_rgb(h, s, v)
    return (int(r), int(g), int(b))

def adjust_color(color, min, max):
    bght = color_brightness(color)
    if bght > max:
        return darken_color(color, bght - max)
    elif bght < min:
        return lighten_color(color, min - bght)
    return color

def saturate_color(color, amount):
    r, g, b = (color[0], color[1], color[2])
    r, g, b = [x/255.0 for x in (r, g, b)]
    h, s, v = colorsys.rgb_to_hsv(r, g, b)
    s = amount
    v = 0.2
    r, g, b = colorsys.hls_to_rgb(h, s, v)
    r, g, b = [x*255.0 for x in (r, g, b)]
    return (int(r), int(g), int(b))

for line in sys.stdin:
    rgb = hex_to_rgb(line.rstrip())
    new = adjust_color(rgb, 35, 65)
    
    print(rgb_to_hex(new))
