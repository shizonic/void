#!/usr/bin/env sh

dir=$(dirname $(realpath -P "$0"))
script=$(basename "${0}")

if test "$#" -eq 0; then
  >&2 printf '[%s] ERROR: Expected to receive an action!\n' "$(date +'%X')"
  return 1
fi

act="${1}"; shift 1

help() {
  >&2 cat << EOL
  $(basename $0) - Theme manager

  c|comp      compile
  g|gen       generate
  l|load      load theme
  m|mass      generate endlessly
  r|rand      get random theme

  arg         (options)               : default
  -----------------------------------------------
  -d|--debug  (none)                  : false
  -f|--from   <name>                  : web
  -g|--gen    (list)                  : all
  -n|--name   <name>|auto             : auto
  -m|--mod    <none|auto|light|dark>  : auto
  -o|--out    <theme|colors|none>     : theme
EOL
}

debug=0
from='web'
gen='all'
name='auto'
mod='auto'
out='theme'

while test "$#" -gt 0; do
  if test "${1}" != '-d' && test "${1}" != '--debug' && test "$#" -eq 1; then
    >&2 printf '[%s] ERROR: Option "%s" requires a value!\n' "$(date +'%X')" "${1}"
    return 1
  fi
  case "${1}" in
    -d|--debug) debug=1; shift 1;;
    -f|--from) from="${2}"; shift 2;;
    -g|--gen) gen="${2}"; shift 2;;
    -n|--name) name="${2}"; shift 2;;
    -m|--mod) mod="${2}"; shift 2;;
    -o|--out) out="${2}"; shift 2;;
    *) 2>&1 printf '[%s] ERROR: Unrecogniized option "%s"!\n' "$(date +'%X')" "${1}"; echo; help; return 1;;
  esac
done

if test "${debug}" -eq 1; then
  >&2 cat << EOL
[$(date +'%X')] DEBUG
  debug: ${debug}
  from: ${from}
  gen: ${gen}
  name: ${name}
  mod: ${mod}
  out: ${out}
EOL
fi

gen() {
  if test -e "${dir}/from/${from}"; then
    >&2 printf '[%s] Running from/%s\n' "$(date +'%X')" "${from}"
    export TMP_DIR="${dir}/tmp"
    . "${dir}/from/${from}"
    test "$?" -gt 0 && return 1
  else
    >&2 printf '[%s] ERROR: Invalid value "%s" for "%s"! Exiting\n' "$(date +'%X')" "${from}" 'from' 
    >&2 printf 'Valid are: %s\n\n' "$(find ${dir}/from -type f -printf '%P, ')"
    return 1
  fi

  if test -z "${THEME_NAME}" || test -z "${THEME_COLORS}"; then
    >&2 printf '[%s] ERROR: "%s" or "%s" are empty! Exiting\n' "$(date +'%X')" '$THEME_NAME' '$THEME_COLORS'
    return 1
  fi

  >&2 printf '[%s] Checking %s\n' "$(date +'%X')" '--out'
  if test "${out}" = 'colors'; then
    printf '%s\n%s' "${THEME_NAME}" "${THEME_COLORS}"
    return
  elif test "${out}" = 'theme'; then
    COLORS="${COLORS:-colors.png}"
    SHADES="${SHADES:-shades.png}"
    SIZE="${SIZE:-32}"

    test "${name}" = 'auto' && name="${THEME_NAME}"
    #name="${THEME_NAME}"

    >&2 printf '[%s] Processing theme "%s"\n' "$(date +'%X')" "${THEME_NAME}"

    if test -d "${dir}/themes/${name}"; then
      >&2 printf '[%s] ERROR: Theme "%s" already exists! Exiting\n' "$(date +'%X')" "${THEME_NAME}"
      return 1
    fi

    mkdir -p "${dir}/themes/${name}"
    cd "${dir}/themes/${name}"

    if test "${mod}" != 'none'; then
      >&2 printf '[%s] Modifying colors\n' "$(date +'%X')"
      #export THEME_COLORS="$(printf '%s\n' "${THEME_COLORS}" | \"${dir}/mod/def\")"
    fi

    printf '%s\n' "${THEME_COLORS}" > 'colors.list'

    for c in ${THEME_COLORS}; do
      printf '%s' "${c}" | grep -q -E '#[0-9A-F]*' || continue
      convert -size "${SIZE}x${SIZE}" "xc:${c}" +depth miff:-
    done | montage - -geometry +0+0 "${COLORS}"

    >&2 printf '[%s] Calculating brightness\n' "$(date +'%X')"
    R=$(convert "${COLORS}" -scale 1x1! -format "%[fx:mean.r]" info:)
    G=$(convert "${COLORS}" -scale 1x1! -format "%[fx:mean.g]" info:)
    B=$(convert "${COLORS}" -scale 1x1! -format "%[fx:mean.b]" info:)
    brightness=$(echo "(0.299 * $R + 0.587 * $G + 0.114 * $B) * 100" | bc -s | cut -d '.' -f 1)

    >&2 printf '[%s] Brightness: %s\n' "$(date +'%X')" "${brightness}"
    printf '%s' "${brightness}" > brightness

    >&2 printf '[%s] Generating shades\n' "$(date +'%X')"
    cat > 'shades.list' << EOL
#181818
#282828
#383838
#585858
#b8b8b8
#d8d8d8
#e8e8e8
#f8f8f8
EOL

  if test "${brightness}" -lt 50; then
    shades=$(tac 'shades.list')
    printf '%s\n' "${shades}" > 'shades.list'
    printf 'light' > variant
  else
    printf 'dark' > variant
  fi

  cat 'shades.list' | while read s; do
  printf '%s' "${s}" | grep -q -E '#[0-9A-F]*' || continue
  convert -size "${SIZE}x${SIZE}" "xc:${s}" +depth miff:-
  done | montage - -geometry +0+0 "${SHADES}"

  if test -n "${THEME_IMAGE}"; then
    >&2 printf '[%s] Saving image as wallpaper\n' "$(date +'%X')"
    imgDir=$(dirname "${THEME_IMAGE}")
    imgExt=$(basename "${THEME_IMAGE}" | awk -F . '{print $NF}')
    tmpDir=$(realpath "${dir}/tmp")
    convert "${THEME_IMAGE}" "wall.${imgExt}"
    convert "${THEME_IMAGE}" -resize 256 "thumb.${imgExt}"
    test "${imgDir}" = "${tmpDir}" && rm "${THEME_IMAGE}"
  fi

  printf '%s' "${name}"

  cd - >/dev/null
  fi
}

comp() {
  if ! test -d "${dir}/themes/${THM_NAME}"; then
    >&2 printf '[%s] ERROR: Theme %s not found!\n' "$(date +'%X')" "${THM_NAME}"
    return 1
  fi

  . thm2env

  cd "${dir}/themes/${THM_NAME}"

  >&2 printf '[%s] Compiling %s\n' "$(date +'%X')" "${THM_NAME}"

  >&2 printf '[%s] Setting up dirs\n' "$(date +'%X')"
  test -d 'gen' || mkdir 'gen'
  test -L 'stc' || ln -s "${dir}/tpl/stc" stc
  test -L 'exe' || ln -s "${dir}/tpl/exe" exe
  
  printf '[%s] Generating configs\n' "$(date +'%X')"
  gen=$(find "${dir}/tpl/gen" -type f)
  for gf in ${gen}; do
    bn=$(basename "${gf}")
    printf '[%s] - %s\n' "$(date +'%X')" "${bn}"
    cat "${gf}" | envsubst > "gen/${bn}"
  done

  printf '[%s] Fixing vim-colors\n' "$(date +'%X')"
  sed -i 's/"#/"/g' gen/vim-colors

  printf '%s' "$(date +'%x@%X')" > compiled

  cd - >/dev/null
}

rand() {
  find "${dir}/themes" -mindepth 1 -maxdepth 1 -type d | sort -R | head -n 1 | xargs basename
}

load() {
  if test -z "${THM_NAME}"; then
    >&2 printf '[%s] ERROR: Please set ${%s}!\n' "$(date +'%X')" 'THM_NAME'
    return 1
  fi

  if ! test -d "${dir}/themes/${THM_NAME}"; then
    >&2 printf '[%s] ERROR: Theme %s not found!\n' "$(date +'%X')" "${THM_NAME}"
    return 1
  fi

  if ! test -e "${dir}/themes/${THM_NAME}/compiled"; then
    test -z "${DRY_RUN}" && thm c
  fi

  >&2 printf '[%s] Loading "%s"\n' "$(date +'%X')" "${THM_NAME}"
  . thm2env

  if test -d "${dir}/themes/${THM_NAME}/exe"; then
    printf '[%s] Modifying ${PATH} ...\n' "$(date +'%X')"
    test -z "${DRY_RUN}" && export PATH="${PATH}:${dir}/themes/${THM_NAME}/exe"
  fi

  >&2 printf '[%s] Reloading font cache ...\n' "$(date +'%X')"
  test -z "${DRY_RUN}" && xset fp rehash

  if test -z "${DRY_RUN}"; then
    test -L "${dir}/themes/current" && rm -f "${dir}/themes/current"
    test -L "${dir}/gtk/current" && rm -f "${dir}/gtk/current"
    test -L "${dir}/gtk/gtk2.rc" && rm -f "${dir}/gtk/gtk2.rc"
    test -L "${dir}/gtk/gtk3.ini" && rm -f "${dir}/gtk/gtk3.ini"
  fi

  >&2 printf '[%s] Linking current ...\n' "$(date +'%X')"
  test -z "${DRY_RUN}" && ln -s "${dir}/themes/${THM_NAME}" "${dir}/themes/current"

  >&2 printf '[%s] Linking gtk ...\n' "$(date +'%X')"

  if test -z "${DRY_RUN}"; then
    if test "${variant}" = 'light'; then
      ln -s "${dir}/gtk/Arc-Dark" "${dir}/gtk/current"
      ln -s "${dir}/themes/current/gen/gtk3-dark.ini" "${dir}/gtk/gtk3.ini"
      ln -s "${dir}/themes/current/gen/gtk2-dark.rc" "${dir}/gtk/gtk2.rc"
    elif test "${variant}" = 'dark'; then
      ln -s "${dir}/gtk/Arc" "${dir}/gtk/current"
      ln -s "${dir}/themes/current/gen/gtk3-light.ini" "${dir}/gtk/gtk3.ini"
      ln -s "${dir}/themes/current/gen/gtk2-light.rc" "${dir}/gtk/gtk2.rc"
    fi
  fi

  if test -n "${wallpaper}"; then
    >&2 printf '[%s] Setting wallpaper ...\n' "$(date +'%X')"
    test -z "${DRY_RUN}" && setroot -z "${wallpaper}"
  fi
}

mass() {
  i=1
  while test "${i}" -lt 10; do
    export THM_NAME=$(thm g -f "${from}")
    thm c
    i=$((i +1))
  done
  thm2prv
}

case "${act}" in
  c|comp) comp;;
  g|gen) gen;;
  l|load) load;;
  m|mass) mass;;
  r|rand) rand;;
esac
